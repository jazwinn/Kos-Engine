R"( #version 430 core

 struct Particle 
{
    float lifeSpan;      
    float rotation;
    float isActive;      
    int textureID;      
    int stripCount;     
    int frameNumber;    
    int layer;        
    float initialEmissionAngle; 
    vec2 position;       
    vec2 velocity;       
    vec2 acceleration;  
    vec2 scale;          
    vec4 color;          
};

layout(std430, binding = 0) buffer ParticleBuffer 
{
    Particle particles[];
};

uniform float deltaTime;

layout (local_size_x = 256) in;

void main() 
{
    uint id = gl_GlobalInvocationID.x;

    if (id >= particles.length())
    {
        return;
    }

    if (particles[id].isActive < 1.f)
    {
        return;
    }

  float newAngle =  particles[id].initialEmissionAngle;
  vec2 newAccel = {  particles[id].acceleration.x * cos(newAngle) +  particles[id].acceleration.y * sin(newAngle),
                                                     -particles[id].acceleration.x * sin(newAngle) +  particles[id].acceleration.y * cos(newAngle) };

  particles[id].velocity +=  newAccel * deltaTime;
  particles[id].position += particles[id].velocity * deltaTime;


  particles[id].lifeSpan -= deltaTime;

    if (particles[id].lifeSpan < 0.f)
    {
       particles[id].isActive = 0.f;
    }

  
   

}


)"
